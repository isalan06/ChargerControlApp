@{
    ViewData["Title"] = "Charger Control App";
}

<div class="text-center">
    <h1 class="display-4">Battery Swapping Station</h1>
</div>

<div style="display:flex; flex-direction:row; align-items:flex-start; gap:32px;">
    <!-- 狀態總覽區 -->
    <div id="status-overview" style="width:320px; border:1px solid #ccc; border-radius:8px; padding:16px; background:#fafbfc;">
        <div style="font-weight:bold; font-size:1.1em; margin-bottom:8px;">狀態總覽區</div>
        <div>
            <span style="font-weight:bold;">設備狀態：</span>
            <span id="station-state" style="color:#007bff;">讀取中...</span>
        </div>
        <div style="margin-top:8px;">
            <span style="font-weight:bold;">電源供應器連線數量：</span>
            <span id="psu-count" style="color:#28a745;">讀取中...</span>
        </div>
        <div style="margin-top:8px;">
            <span style="font-weight:bold;">Canbus連線狀態：</span>
            <span id="canbus-status" style="color:#17a2b8;">讀取中...</span>
        </div>
        <div style="margin-top:8px;">
            <span style="font-weight:bold;">Modbus連線狀態：</span>
            <span id="modbus-status" style="color:#17a2b8;">讀取中...</span>
        </div>
        <div style="margin-top:8px;">
            <span style="font-weight:bold;">Modbus讀取時間(ms)：</span>
            <span id="modbus-command-time" style="color:#007bff;">讀取中...</span>
        </div>
        <div style="margin-top:8px;">
            <span style="font-weight:bold;">Modbus間隔時間(ms)：</span>
            <span id="modbus-interval-time" style="color:#007bff;">讀取中...</span>
        </div>
        <div style="margin-top:8px;">
            <span style="font-weight:bold;">Motor Alarm：</span>
            <span id="motor-alarm" style="color:#dc3545;">讀取中...</span>
        </div>
        <div style="margin-top:8px;">
            <span style="font-weight:bold;">電源供應器Alarm：</span>
            <span id="psu-alarm" style="color:#dc3545;">讀取中...</span>
        </div>
        <div style="margin-top:8px;">
            <span style="font-weight:bold;">Slot Alarm：</span>
            <span id="slot-alarm" style="color:#dc3545;">讀取中...</span>
        </div>
        <div style="margin-top:8px;">
            <span style="font-weight:bold;">程序 Alarm：</span>
            <span id="procedure-alarm" style="color:#dc3545;">讀取中...</span>
        </div>
        <div style="margin-top:8px;">
            <span style="font-weight:bold;">主程序編號：</span>
            <span id="main-proc-case" style="color:#6c757d;">讀取中...</span>
        </div>
        <div style="margin-top:16px; border-top:1px solid #eee; padding-top:12px;">
            <div class="mt-2">
                <span>錯誤訊息：</span>
                <div id="errorMessage" class="rich-text-box">
                    -
                </div>
            </div>
            <div class="mt-2">
                <span>主程序動作訊息：</span>
                <div id="mainProcedureStatusMessage" class="rich-text-box">
                    -
                </div>
            </div>
            <div class="mt-2">
                <span>子程序動作訊息：</span>
                <div id="procedureStatusMessage" class="rich-text-box">
                    -
                </div>
            </div>
        </div>
    </div>

    <!-- 運轉操作區 -->
    <div id="operation-panel" style="width:300px; border:1px solid #ccc; border-radius:8px; padding:16px; background:#f5f7fa;">
        <div style="font-weight:bold; font-size:1.1em; margin-bottom:8px;">運轉操作區</div>
        <div>
            <button id="btn-auto-proc" class="btn btn-primary" style="width:100%;">電池交換運行</button>
        </div>
        <div style="margin-top:12px;">
            <button id="btn-stop-proc" class="btn btn-danger" style="width:100%;">停止電池交換</button>
        </div>
        <div style="margin-top:12px;">
            <button id="btn-reset-alarm" class="btn btn-warning" style="width:100%;">告警重置</button>
        </div>
        <div style="margin-top:12px;">
            <button id="btn-system-reset" class="btn btn-secondary" style="width:100%;">系統初始化</button>
        </div>
        <div style="margin-top:12px;">
            <button id="btn-force-reset" class="btn btn-danger" style="width:100%;">系統強置到Idle狀態</button>
        </div>
        <div style="margin-top:12px;">
            <button id="btn-home-proc" class="btn btn-info" style="width:100%;">原點復歸</button>
        </div>
    </div>
    <!-- 模式操作區 -->
    <div id="mode-operation-area" style="width:300px; border:1px solid #ccc; border-radius:8px; padding:16px; background:#f5f7fa;">
        <div style="font-weight:bold; font-size:1.1em; margin-bottom:8px;">模式操作區</div>
        <div style="margin-top:12px;">
            <span style="font-weight:bold;">目前模式：</span>
            <span id="manual-mode-status" style="color:#007bff;">讀取中...</span>
        </div>
        <div>
            <button id="btn-manual-mode-proc" class="btn btn-primary" style="width:100%;">開啟手動模式</button>
        </div>
        <hr style="margin:16px 0;" />
        <div>
            <span style="font-weight:bold;">上位系統連線狀態：</span>
            <span id="grpc-online-status" style="color:#007bff;">讀取中...</span>
        </div>
        <div style="margin-top:12px; display:flex; gap:8px;">
            <button id="btn-grpc-connect" class="btn btn-success" style="flex:1;">連線</button>
            <button id="btn-grpc-disconnect" class="btn btn-danger" style="flex:1;">離線</button>
        </div>
        <div id="grpc-loading" style="display:none; margin-top:12px; text-align:center;">
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span>gRPC Server連線中，請稍候...</span>
        </div>
    </div>
</div>


<script>

    // 運轉操作區按鈕事件
    document.addEventListener('DOMContentLoaded', function () {
        // 電池交換運行
        document.getElementById('btn-auto-proc').addEventListener('click', async function () {
            const btn = this;
            btn.disabled = true;
            btn.textContent = '執行中...';
            try {
                const res = await fetch('/Home/StartAutoProcedure', { method: 'POST' });
                if (res.ok) {
                    const data = await res.json();
                    alert(data.message);
                } else {
                    alert('觸發失敗');
                }
            } catch {
                alert('連線錯誤');
            }
            btn.disabled = false;
            btn.textContent = '電池交換運行';
        });

        // 停止電池交換
        document.getElementById('btn-stop-proc').addEventListener('click', async function () {
            const btn = this;
            btn.disabled = true;
            btn.textContent = '執行中...';
            try {
                const res = await fetch('/Home/StopAutoProcedure', { method: 'POST' });
                if (res.ok) {
                    const data = await res.json();
                    alert(data.message);
                } else {
                    alert('觸發失敗');
                }
            } catch {
                alert('連線錯誤');
            }
            btn.disabled = false;
            btn.textContent = '停止電池交換';
        });

        // 告警重置
        document.getElementById('btn-reset-alarm').addEventListener('click', async function () {
            const btn = this;
            btn.disabled = true;
            btn.textContent = '執行中...';
            try {
                const res = await fetch('/Home/ResetAlarm', { method: 'POST' });
                if (res.ok) {
                    const data = await res.json();
                    alert(data.message);
                } else {
                    alert('觸發失敗');
                }
            } catch {
                alert('連線錯誤');
            }
            btn.disabled = false;
            btn.textContent = '告警重置';
        });

        // 系統重置
        document.getElementById('btn-system-reset').addEventListener('click', async function () {
            const btn = this;
            btn.disabled = true;
            btn.textContent = '執行中...';
            try {
                const res = await fetch('/Home/SystemReset', { method: 'POST' });
                if (res.ok) {
                    const data = await res.json();
                    alert(data.message);
                } else {
                    alert('觸發失敗');
                }
            } catch {
                alert('連線錯誤');
            }
            btn.disabled = false;
            btn.textContent = '系統初始化';
        });

		// 系統強置到Idle狀態
        document.getElementById('btn-force-reset').addEventListener('click', async function () {
            const btn = this;
            btn.disabled = true;
            btn.textContent = '執行中...';
            try {
                const res = await fetch('/Home/SystemForceToIdle', { method: 'POST' });
                if (res.ok) {
                    const data = await res.json();
                    alert(data.message);
                } else {
                    alert('觸發失敗');
                }
            } catch {
                alert('連線錯誤');
            }
            btn.disabled = false;
            btn.textContent = '系統強置到Idle狀態';
		});

        // 原點復歸
        document.getElementById('btn-home-proc').addEventListener('click', async function () {
            const btn = this;
            btn.disabled = true;
            btn.textContent = '執行中...';
            try {
                const res = await fetch('/Home/HomeProcedure', { method: 'POST' });
                if (res.ok) {
                    const data = await res.json();
                    alert(data.message);
                } else {
                    alert('觸發失敗');
                }
            } catch {
                alert('連線錯誤');
            }
            btn.disabled = false;
            btn.textContent = '原點復歸';
        });

		// 手動模式切換
        document.getElementById('btn-manual-mode-proc').addEventListener('click', async function () {
        const btn = this;
        btn.disabled = true;
        try {
            const res = await fetch('/Home/SwitchManualMode', { method: 'POST' });
            if (res.ok) {
                const data = await res.json();
                alert(data.message);
                document.getElementById('manual-mode-status').textContent = data.mode;
            } else {
                alert('切換失敗');
            }
        } catch {
            alert('連線錯誤');
        }
        btn.disabled = false;
        });

        // 連線按鈕事件
        document.getElementById('btn-grpc-connect').addEventListener('click', async function () {
            const loading = document.getElementById('grpc-loading');
            loading.style.display = 'block';
            try {
                const res = await fetch('/Home/GetGrpcOnlineStatus?op=connect', { method: 'POST' });
                if (res.ok) {
                    const data = await res.json();
                    alert(data.message);
                } else {
                    alert('連線失敗');
                }
            } catch {
                alert('連線失敗');
            }
            loading.style.display = 'none';
        });

        // 離線按鈕事件
        document.getElementById('btn-grpc-disconnect').addEventListener('click', async function () {
            const loading = document.getElementById('grpc-loading');
            loading.style.display = 'block';
            try {
                const res = await fetch('/Home/GetGrpcOnlineStatus?op=disconnect', { method: 'POST' });
                if (res.ok) {
                    const data = await res.json();
                    alert(data.message);
                } else {
                    alert('離線失敗');
                }
            } catch {
                alert('離線失敗');
            }
            loading.style.display = 'none';
        });

    });


    async function fetchStationState() {
        try {
            const res = await fetch('/Home/GetStationState');
            if (res.ok) {
                const data = await res.json();
                document.getElementById('station-state').textContent = data.state;
                document.getElementById('psu-count').textContent = data.psuCount;
                document.getElementById('canbus-status').textContent = data.canbus ? '已連線' : '未連線';
                document.getElementById('canbus-status').style.color = data.canbus ? '#28a745' : '#dc3545';
                document.getElementById('modbus-status').textContent = data.modbus ? '已連線' : '未連線';
                document.getElementById('modbus-status').style.color = data.modbus ? '#28a745' : '#dc3545';

                document.getElementById('modbus-interval-time').textContent = data.modbusActFreq;
                document.getElementById('modbus-command-time').textContent = data.modbusReadTime;
                

                document.getElementById('motor-alarm').textContent = data.motorAlarm ? '異常' : '正常';
                document.getElementById('motor-alarm').style.color = data.motorAlarm ? '#dc3545' : '#28a745';

                document.getElementById('psu-alarm').textContent = data.psuAlarm ? '異常' : '正常';
                document.getElementById('psu-alarm').style.color = data.psuAlarm ? '#dc3545' : '#28a745';

                document.getElementById('slot-alarm').textContent = data.slotAlarm ? '異常' : '正常';
                document.getElementById('slot-alarm').style.color = data.slotAlarm ? '#dc3545' : '#28a745';

                document.getElementById('procedure-alarm').textContent = data.procedureAlarm ? '異常' : '正常';
                document.getElementById('procedure-alarm').style.color = data.procedureAlarm ? '#dc3545' : '#28a745';

                document.getElementById('main-proc-case').textContent = data.mainProcedureCase;

                document.getElementById('manual-mode-status').textContent = data.isManualMode ? '手動模式' : '自動模式';
                document.getElementById('btn-manual-mode-proc').textContent= data.isManualMode ? '結束手動模式' : '開啟手動模式';

                document.getElementById('grpc-online-status').textContent = data.isOnline ? '已連線' : '未連線';
                document.getElementById('grpc-online-status').style.color = data.isOnline ? '#28a745' : '#dc3545';

                document.getElementById('errorMessage').textContent = data.errorMessage ?? '-';
                document.getElementById('mainProcedureStatusMessage').textContent = data.mainProcedureStatusMessage ?? '-';
                document.getElementById('procedureStatusMessage').textContent = data.procedureStatusMessage ?? '-';

            } else {
                [
                    'station-state', 'psu-count', 'canbus-status', 'modbus-status','modbus-interval-time', 'modbus-command-time',
                    'motor-alarm', 'psu-alarm', 'slot-alarm', 'procedure-alarm', 'main-proc-case', 'manual-mode-status', 'btn-manual-mode-proc',
					'grpc-online-status', 'errorMessage', 'mainProcedureStatusMessage', 'procedureStatusMessage'
                ].forEach(id => document.getElementById(id).textContent = '取得失敗');

            }
        } catch {
            [
                'station-state', 'psu-count', 'canbus-status', 'modbus-status','modbus-interval-time', 'modbus-command-time',
                'motor-alarm', 'psu-alarm', 'slot-alarm', 'procedure-alarm', 'main-proc-case', 'manual-mode-status', 'btn-manual-mode-proc',
                'grpc-online-status', 'errorMessage', 'mainProcedureStatusMessage', 'procedureStatusMessage'
            ].forEach(id => document.getElementById(id).textContent = '連線錯誤');
        }
    }
    fetchStationState();
    setInterval(fetchStationState, 2000); // 每2秒自動更新
</script>


