@{
    ViewData["Title"] = "Motor";
}
<div class="text-center">
    <h1 class="display-4">馬達操作</h1>
    <div class="motor-tabs">
        <button class="motor-tab-btn active" onclick="showTab('manual')">手動</button>
        <button class="motor-tab-btn" onclick="showTab('semiAuto')">半自動</button>
    </div>
    <div id="manualTab" class="motor-tab-content">
        <div class="motors-row" id="motorsRow"></div>
        <div class="motors-actions-flex" id="motorsActions"></div>
    </div>
    <div id="semiAutoTab" class="motor-tab-content" style="display:none;">
        <div class="semi-auto-content">
            <!-- 這裡放半自動頁面的內容，依需求填入 -->
            <p>半自動功能區塊（請依需求填入）</p>
        </div>
    </div>
</div>

<script>
    function showTab(tab) {
        document.getElementById('manualTab').style.display = tab === 'manual' ? '' : 'none';
        document.getElementById('semiAutoTab').style.display = tab === 'semiAuto' ? '' : 'none';
        document.querySelectorAll('.motor-tab-btn').forEach(btn => btn.classList.remove('active'));
        document.querySelector('.motor-tab-btn' + (tab === 'manual' ? ':first-child' : ':last-child')).classList.add('active');
    }

    function renderMotorsStatus(data) {
        let html = '';
        data.forEach(m => {
            html += `
            <div class="motor-status-card">
                <div class="card-section-top">
                    <div class="motor-title">馬達 #${m.id}</div>
                    <div class="motor-title-divider"></div>
                    <div class="section-title section-title-io">IO狀態</div>
                    <div style="display: flex; align-items: center; gap: 8px; margin-top: 8px; margin-left:12px">
                        <span class="status-light ${m.sOn ? 'on' : 'off'}"></span>
                        <span>伺服</span>
                        <span class="alarm-light ${m.armA ? 'on' : 'off'}"></span>
                        <span>Alarm</span>
                        <span>錯誤碼：${m.errorCode}</span>
                    </div>
                    <div class="lights-row">
                        <div class="light-item">
                            <span class="status-light ${m.sysBsy ? 'on' : 'off'}"></span>
                            <span>BUSY</span>
                        </div>
                        <div class="light-item">
                            <span class="status-light ${m.move ? 'on' : 'off'}"></span>
                            <span>MOVE</span>
                        </div>
                        <div class="light-item">
                            <span class="status-light ${m.inPos ? 'on' : 'off'}"></span>
                            <span>IN-POS</span>
                        </div>
                    </div>
                    <!-- 其他狀態燈... -->
                </div>
                <div class="card-divider"></div>
                <div class="card-section card-section-bottom">
                    <div class="section-title">數據</div>
                    <div>位置：${m.posActual}</div>
                    <div>速度：${m.velActual}</div>
                    <div class="opdata-list">
                        <div class="opdata-item">選擇資料編號：${m.opData_IdSelect}</div>
                        <div class="opdata-item">運轉資料編號：${m.opData_IdOp}</div>
                        <div class="opdata-item">指令位置：${m.opData_Pos_Command}</div>
                        <div class="opdata-item">指令速度：${m.opData_Vel_Command}</div>
                        <div class="opdata-item">檢測位置：${m.opData_Pos_Actual}</div>
                        <div class="opdata-item">檢測速度：${m.opData_Vel_Actual}</div>
                    </div>
                </div>
            </div>
            `;
        });
        document.getElementById('motorsRow').innerHTML = html;
    }

    function renderMotorsActions(data) {
        let html = '';
        data.forEach(m => {
            html += `
            <div class="motor-action-card motor-action-frame">
                <div class="action-btn-row">
                    <button type="button"
                        class="action-btn"
                        onmousedown="setHome(${m.id}, true)"
                        onmouseup="setHome(${m.id}, false)"
                        onmouseleave="setHome(${m.id}, false)">
                        HOME
                    </button>
                    <button type="button"
                        class="action-btn"
                        onmousedown="setStop(${m.id}, true)"
                        onmouseup="setStop(${m.id}, false)"
                        onmouseleave="setStop(${m.id}, false)">
                        STOP
                    </button>
                </div>
                <div class="radio-row">
                    <div class="section-title">JOG</div>
                    <label class="radio-item">
                        <input type="radio" name="jogMode${m.id}" value="2" ${m.jogMode == 2 ? 'checked' : ''} onchange="setJogMode(${m.id}, 2)">
                        吋動
                    </label>
                    <label class="radio-item">
                        <input type="radio" name="jogMode${m.id}" value="0" ${m.jogMode == 0 ? 'checked' : ''} onchange="setJogMode(${m.id}, 0)">
                        低速
                    </label>
                    <label class="radio-item">
                        <input type="radio" name="jogMode${m.id}" value="1" ${m.jogMode == 1 ? 'checked' : ''} onchange="setJogMode(${m.id}, 1)">
                        高速
                    </label>
                </div>
                <div class="jog-btn-row">
                    <button type="button"
                        class="jog-btn"
                        onmousedown="setJog(${m.id}, 'FW', true)"
                        onmouseup="setJog(${m.id}, 'FW', false)"
                        onmouseleave="setJog(${m.id}, 'FW', false)">
                        FW-JOG
                    </button>
                    <button type="button"
                        class="jog-btn"
                        onmousedown="setJog(${m.id}, 'RV', true)"
                        onmouseup="setJog(${m.id}, 'RV', false)"
                        onmouseleave="setJog(${m.id}, 'RV', false)">
                        RV-JOG
                    </button>
                </div>
                <div class="data-select-row">
                    <span class="data-select-title">位置資料選擇</span>
                    <select class="data-select-combo" onchange="setDataNo_M(${m.id}, this.value)">
                        ${[...Array(256).keys()].map(n => `<option value="${n}" ${m.dataNo == n ? 'selected' : ''}>${n}</option>`).join('')}
                    </select>
                    <button type="button"
                        class="start-btn"
                        onmousedown="setStart(${m.id}, true)"
                        onmouseup="setStart(${m.id}, false)"
                        onmouseleave="setStart(${m.id}, false)"
                        style="margin-left:12px;">
                        START
                    </button>
                </div>
                <button type="button" class="toggle-servo-btn" data-id="${m.id}" style="margin-left:12px;">切換伺服</button>
                <button type="button"
                    class="alarm-btn"
                    data-id="${m.id}"
                    onmousedown="setAlarm(${m.id}, true)"
                    onmouseup="setAlarm(${m.id}, false)"
                    onmouseleave="setAlarm(${m.id}, false)"
                    style="margin-left:12px;">
                    Reset Alarm
                </button>
            </div>
            `;
        });
        document.getElementById('motorsActions').innerHTML = html;

        document.querySelectorAll('.toggle-servo-btn').forEach(btn => {
            btn.onclick = function() {
                const motorId = btn.getAttribute('data-id');
                fetch('/Home/ToggleServo?motorId=' + motorId, { method: 'POST' })
                    .then(response => response.json())
                    .then(data => {
                        // 不自動刷新狀態
                    });
            };
        });
    }

    function updateMotorsStatus() {
        fetch('/Motor/GetMotorsStatus')
            .then(response => response.json())
            .then(data => {
                renderMotorsStatus(data);
            });
    }

    fetch('/Motor/GetMotorsStatus')
        .then(response => response.json())
        .then(data => {
            renderMotorsActions(data);
        });

    setInterval(updateMotorsStatus, 2000);
    updateMotorsStatus();
</script>