@{
    ViewData["Title"] = "Units";
}
<div class="text-center">
    <h1 class="display-4">Unit 管理</h1>
    <div class="unit-tabs">
        <button class="unit-tab-btn active" onclick="showUnitTab('gpio')">GPIO</button>
        <button class="unit-tab-btn" onclick="showUnitTab('slot')">Slot</button>
    </div>
    @using ChargerControlApp.DataAccess.GPIO.Services
    <div id="gpioTab" class="tab-pane fade show active">
        <!-- 第一行：顯示 GPIO 是否存在 -->
        <div>
            GPIO 是否存在：<strong>@(GPIOService.IsGpioAvailable ? "是" : "否")</strong>
        </div>

        <!-- 第二行：兩個藍色按鈕，間隔拉開 -->
        <div class="mt-2">
            <button id="btnPin1" class="btn btn-primary me-2">PIN1</button>
            <button id="btnPin2" class="btn btn-primary">PIN2</button>
        </div>

        <!-- 顯示目前狀態 -->
        <div class="mt-3">
            <span>PIN1 狀態：<span id="pin1State">@GPIOService.Pin1Value</span></span>
            <span class="mx-3"></span>
            <span>PIN2 狀態：<span id="pin2State">@GPIOService.Pin2Value</span></span>
        </div>
    </div>
    @using TAC.Hardware
    @inject ChargerControlApp.DataAccess.Slot.Services.SlotServices SlotServices

    <div id="slotTab" class="unit-tab-content" style="display:none;">
        <div class="d-flex align-items-center">
            <span>Station 狀態：<strong id="stationState">@ChargerControlApp.DataAccess.Slot.Services.SlotServices.StationState</strong></span>
            <select id="stationStateSelect" class="form-select mx-3" style="width:auto; display:inline-block;">
                @foreach (var state in Enum.GetNames(typeof(StationState)))
                {
                    var isSelected = state == ChargerControlApp.DataAccess.Slot.Services.SlotServices.StationState.ToString() ? "selected" : "";
                    <option value="@state" {isSelected}>@state</option>
                }
            </select>
            <button id="setStationStateBtn" class="btn btn-primary">Set</button>
        </div>

        <div class="mt-4">
            @for (int i = 0; i < SlotServices.SlotInfo.Length; i++)
            {
                var slot = SlotServices.SlotInfo[i];
                var bgColor = slot.IsEnabled ? "bg-white" : "bg-light";
                <div class="border rounded p-2 mb-2 d-flex align-items-center @bgColor" style="min-height:48px;">
                    <span class="me-3" style="width:80px;">@slot.Name</span>
                    <span class="me-3" style="width:120px;">
                        <span id="slot-@i-progress">@slot.ChargingProcessValue.ToString("F2") %</span>
                    </span>
                    <span class="me-3" style="width:100px;">
                        <span id="slot-@i-state">@slot.ChargeState</span>
                    </span>
                    <select id="slot-@i-combo" class="form-select me-3" style="width:auto; display:inline-block;">
                        @foreach (var state in Enum.GetNames(typeof(SlotChargeState)))
                        {
                            var isSelected = state == slot.ChargeState.ToString() ? "selected" : "";
                            <option value="@state" {isSelected}>@state</option>
                        }
                    </select>
                    <button class="btn btn-primary" onclick="setSlotChargeState(@i)">設定</button>
                    <span class="ms-4" style="width:180px;">
                        <span id="slot-@i-machine">@SlotServices.SlotInfo[i].State.GetCurrentStateName()</span>
                    </span>
                    <select id="slot-@i-state-combo" class="form-select ms-2" style="width:auto; display:inline-block;">
                        @foreach (var state in Enum.GetValues(typeof(ChargerControlApp.DataAccess.Slot.Services.SlotState)))
                        {
                            <option value="@state">@state</option>
                        }
                    </select>
                    <button class="btn btn-secondary ms-2" onclick="setSlotState(@i)">切換狀態</button>
                    <!-- 新增：電池存在顯示 -->
                    <span class="ms-4 d-flex align-items-center" style="width:160px;">
                        <span id="slot-@i-battery"
                              class="badge @(slot.BatteryMemory ? "bg-success" : "bg-secondary")"
                              style="width:80px; display:inline-block; text-align:center;">
                            @(slot.BatteryMemory ? "電池存在" : "無電池")
                        </span>
                        <button class="btn btn-warning btn-sm ms-2" onclick="swapBatteryMemory(@i)">切換</button>
                    </span>
                </div>
            }
        </div>
    </div>
</div>

<script>
    function showUnitTab(tab) {
        document.getElementById('gpioTab').style.display = tab === 'gpio' ? '' : 'none';
        document.getElementById('slotTab').style.display = tab === 'slot' ? '' : 'none';
        document.querySelectorAll('.unit-tab-btn').forEach(btn => btn.classList.remove('active'));
        document.querySelector('.unit-tab-btn' + (tab === 'gpio' ? ':first-child' : ':last-child')).classList.add('active');
    }

    document.getElementById('btnPin1').addEventListener('click', function () {
        fetch('@Url.Action("TogglePin", "Units")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'RequestVerificationToken': '@Html.AntiForgeryToken()'.replace('<input name="__RequestVerificationToken" type="hidden" value="', '').replace('" />', '')
            },
            body: 'pin=1'
        })
        .then(response => response.json())
        .then(data => {
            document.getElementById('pin1State').textContent = data.pin1;
            document.getElementById('pin2State').textContent = data.pin2;
        });
    });

    document.getElementById('btnPin2').addEventListener('click', function () {
        fetch('@Url.Action("TogglePin", "Units")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'RequestVerificationToken': '@Html.AntiForgeryToken()'.replace('<input name="__RequestVerificationToken" type="hidden" value="', '').replace('" />', '')
            },
            body: 'pin=2'
        })
        .then(response => response.json())
        .then(data => {
            document.getElementById('pin1State').textContent = data.pin1;
            document.getElementById('pin2State').textContent = data.pin2;
        });
    });

    // 定期取得PIN狀態
    function fetchPinStatus() {
        fetch('@Url.Action("GetPinStatus", "Units")')
            .then(response => response.json())
            .then(data => {
                document.getElementById('pin1State').textContent = data.pin1;
                document.getElementById('pin2State').textContent = data.pin2;
            });
    }

    setInterval(fetchPinStatus, 2000); // 每2秒更新一次

    // 定期取得 Station 狀態
    function fetchStationState() {
        fetch('@Url.Action("GetStationState", "Units")')
            .then(response => response.json())
            .then(data => {
                document.getElementById('stationState').textContent = data.state;
                // 若 combobox 沒有 focus 才自動同步
                let select = document.getElementById('stationStateSelect');
                if (document.activeElement !== select) {
                    select.value = data.state;
                }
            });
    }
    setInterval(fetchStationState, 2000);

    // 設定 Station 狀態
    document.getElementById('setStationStateBtn').addEventListener('click', function () {
        const selectedState = document.getElementById('stationStateSelect').value;
        fetch('@Url.Action("SetStationState", "Units")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'RequestVerificationToken': '@Html.AntiForgeryToken()'.replace('<input name="__RequestVerificationToken" type="hidden" value="', '').replace('" />', '')
            },
            body: 'state=' + encodeURIComponent(selectedState)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                document.getElementById('stationState').textContent = data.state;
            } else {
                alert('狀態設定失敗');
            }
        });
    });

    // 定期取得Slot狀態
    function fetchSlotStatus() {
        fetch('@Url.Action("GetSlotStatus", "Units")')
            .then(response => response.json())
            .then(data => {
                data.forEach(function(slot, i) {
                    document.getElementById('slot-' + i + '-progress').textContent = slot.chargingProcessValue.toFixed(2) + ' %';
                    document.getElementById('slot-' + i + '-state').textContent = slot.chargeState;
                    document.getElementById('slot-' + i + '-machine').textContent = slot.machineState;
                    // 新增：更新電池存在顯示
                    var batterySpan = document.getElementById('slot-' + i + '-battery');
                    if (batterySpan) {
                        if (slot.batteryMemory) {
                            batterySpan.className = "badge bg-success";
                            batterySpan.textContent = "電池存在";
                        } else {
                            batterySpan.className = "badge bg-secondary";
                            batterySpan.textContent = "無電池";
                        }
                    }
                });
            });
    }
    setInterval(fetchSlotStatus, 2000);

    // 設定Slot ChargeState
    function setSlotChargeState(idx) {
        const selectedState = document.getElementById('slot-' + idx + '-combo').value;
        fetch('@Url.Action("SetSlotChargeState", "Units")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'RequestVerificationToken': '@Html.AntiForgeryToken()'.replace('<input name="__RequestVerificationToken" type="hidden" value="', '').replace('" />', '')
            },
            body: 'index=' + idx + '&state=' + encodeURIComponent(selectedState)
        })
        .then(response => response.json())
        .then(data => {
            if (!data.success) {
                alert('狀態設定失敗');
            }
        });
    }

	// 設定Slot State
    function setSlotState(idx) {
        const selectedState = document.getElementById('slot-' + idx + '-state-combo').value;
        fetch('@Url.Action("SetSlotState", "Units")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'RequestVerificationToken': '@Html.AntiForgeryToken()'.replace('<input name="__RequestVerificationToken" type="hidden" value="', '').replace('" />', '')
            },
            body: 'index=' + idx + '&state=' + encodeURIComponent(selectedState)
        })
        .then(response => response.json())
        .then(data => {
            if (!data.success) {
                alert('狀態設定失敗');
            }
        });
    }

    // 切換Battery Memory
    function swapBatteryMemory(idx) {
        fetch('@Url.Action("SwapBatteryMemory", "Units")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'RequestVerificationToken': '@Html.AntiForgeryToken()'.replace('<input name="__RequestVerificationToken" type="hidden" value="', '').replace('" />', '')
            },
            body: 'index=' + idx
        })
        .then(response => response.json())
        .then(data => {
            if (!data.success) {
                alert('切換失敗');
            } else {
                fetchSlotStatus(); // 立即刷新顯示
            }
        });
    }
</script>